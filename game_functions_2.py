import file_handler as fhimport randomclass Compare:    def __init__(self, guess, word):        self.guess = guess        self.word = word    def compare_words(self):        # compares the user guess with the chosen word and displays which character is correct        # source: https://qph.fs.quoracdn.net/main-qimg-dbe0252936d6b28a6644faa17953f9ef        if self.guess != self.word:            correct_letters_and_pos = ["" for _ in range(len(self.word))]            correct_letters = []            incorrect_letters = []            word = self.word            # word_letters = list(word)            for g_idx, i in enumerate(self.guess):                print_counter = 0                for w_idx, j in enumerate(self.word):                    count = word.count(i)                    if i == j and g_idx == w_idx:                        correct_letters_and_pos[w_idx] = i                        print(f"Bokstaven {i} är på rätt position.")                        if count < 2:                            break                    elif i == j and g_idx != w_idx:                        if count == 1:                            print(f"Bokstaven {i} finns i ordet, men på en annan position")                            correct_letters.append(i)                            break                        elif count != 1 and print_counter == 0:                            print_counter += 1                            print(f"Det finns flera {i} i ordet, men denna är inte på rätt position.")                            correct_letters.append(i)            if len(incorrect_letters) == 5:                print("Ingen av bokstäverna angivna finns i ordet. Vänligen försök igen.")                return False            # return [correct_letters_and_pos, correct_letters, word_letters]            return False        elif self.guess == self.word:            print(f"Rätt gissning! Ordet var {self.word}")            return True        else:            return Falsedef random_list_element(word_list):    # generates a random word from the parameter word_list    # source: https://docs.python.org/3/library/random.html    # random.sample generates a list. Therefor we can point    # out the value with index indication at the end.    the_random_word = random.sample(word_list, 1)[0]    return the_random_worddef guess_input():    # user input, stored as a "guess" in the game    # source: top comment https://stackoverflow.com/questions/19859282/check-if-a-string-contains-a-number/31861306    # source: any section https://docs.python.org/3/library/functions.html#any    # user_guess = input("\nGissa vilket ord det är: ")    # if any(char.isdigit() for char in user_guess):    #     print("Får enbart innehålla bokstäver")    #     guess_input()    # elif len(user_guess) is not 5:    #     print("Får enbart vara 5 bokstäver")    #     guess_input()    # else:    #     return user_guess.lower()    #    while True:        user_guess = input("\nGissa vilket ord det är: ")        if user_guess == "ge upp":            exit()        elif any(char.isdigit() for char in user_guess):            print("Får enbart innehålla bokstäver")        elif len(user_guess) is not 5:            print("Får enbart vara 5 bokstäver")        else:            return user_guess.lower()# def filter_words_based_on_guess(guess, word_list):#     counter1 = 0#     counter2 = 0#     local_word_list = word_list.copy()#     for word in local_word_list:#         check = Compare(guess, word)#         x = check.compare_words()##     print(f"{counter1} - pass\n{counter2} - fimped")if __name__ == "__main__":    words_file = "words.txt"    latin = 'ISO-8859-1'    words_list = fh.file_reader(read_file=words_file, encoding=latin)    random_word = random_list_element(word_list=words_list)    def main():        go = Compare(guess=guess_input(), word=random_word)        boolean = go.compare_words()        if not boolean:            main()    main()"""                        if i not in correct_letters_and_pos:                            correct_letters.append(i)                            print(f"Bokstaven {i} finns i ordet, men på en annan positon.")                        else:                            correct_letters.append(i)                            print(f"Det finns flera {i}:n i ordet.")"""