import game_explaination as game_expimport randomclass ParseGuess:    def __init__(self, guess, word):        self.guess = guess        self.word = word    def words_analyzer(self):        print_correct_pos = 0        print_correct = 0        for g_idx, g_char in enumerate(self.guess):            if g_char in self.word and g_idx == self.word.index(g_char):                # if the characters and character indexes are matching.                print_correct_pos += 1            elif g_char in self.word:                print_correct += 1        return print_correct_pos, print_correct    def run_game(self):        # compares the user guess with the chosen word and displays which character is correct        # source: https://qph.fs.quoracdn.net/main-qimg-dbe0252936d6b28a6644faa17953f9ef        if self.guess == self.word:            print(f"Rätt gissning! Ordet var {self.word}")            return True        else:            print_correct_pos, print_correct_letter = ParseGuess.words_analyzer(self)            print(f"{print_correct_pos} är rätt och är på rätt plats, och {print_correct_letter} är rätt men på fel "                  f"plats.")def find_related_words(word_list, robot_guess, hints):    results = []    for word in word_list:        counter = 0        for letter in word:            if letter in robot_guess:                counter += 1        if counter >= hints:            results.append(word)    return resultsdef random_list_element(word_list):    # generates a random word from the parameter word_list    # source: https://docs.python.org/3/library/random.html    # random.sample generates a list. Therefor we can point    # out the value with index indication at the end.    the_random_word = random.sample(word_list, 1)[0]    return the_random_worddef player_input(the_answer):    # user input, stored as a "guess" in the game    # source: top comment https://stackoverflow.com/questions/19859282/check-if-a-string-contains-a-number/31861306    # source: any section https://docs.python.org/3/library/functions.html#any    while True:        player_guess = input("\nGissa vilket ord det är: ")        if player_guess == "ge upp" or player_guess == "surrender":            print("Du har valt att avsluta spelet.")            print(f"Ordet var: {the_answer}")            exit()        elif any(char.isdigit() for char in player_guess):            print("Får enbart innehålla bokstäver.")        elif len(player_guess) is not 5:            print("Får enbart vara 5 bokstäver.")        elif player_guess == the_answer:            print("Du gissade rätt på första försöket!")        else:            return player_guess.lower()  # no break or False point, because return jumps out of function.def leader_input(random_word):    print(f"Programmet gissar på att ordet är {random_word}")    correct_letter_answer = int(input("Hur många bokstäver är rätt?"))    return correct_letter_answerdef console_init():    # user input, used for receiving commands, like starting the game etc    # TODO - Ändra alternativen och kontrollera output    commands = ["ge upp", "surrender", "leader", "player", "spelregler", "rules", "quit"]    while True:        print("\n Skriv 'cmd' om du vill se kommando-alternativen.")        user_input = input("\nVill du vara leader eller player?\n ## leader | player ##\n ")        if user_input == "cmd":            print(commands)        elif user_input == "spelregler" or user_input == "rules":            game_exp.get_game_description(boolean=True)        elif user_input == "leader":            return user_input        elif user_input == "player":            return user_input        elif user_input == "quit":            exit()