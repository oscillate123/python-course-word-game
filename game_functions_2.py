import game_explaination as game_expimport file_handler as fhimport randomclass Compare:    def __init__(self, guess, word):        self.guess = guess        self.word = word    def compare_words(self):        # compares the user guess with the chosen word and displays which character is correct        # source: https://qph.fs.quoracdn.net/main-qimg-dbe0252936d6b28a6644faa17953f9ef        if self.guess != self.word:            for g_idx, g_char in enumerate(self.guess):                count = self.word.count(g_char)                print_counter = 0                for w_idx, w_char in enumerate(self.word):                    if g_char == w_char and g_idx == w_idx:                        # if the characters and character indexes are matching.                        print(f"Bokstaven {g_char} är på rätt position.")                        if count == 1:  # if there are no similar characters                            break  # we stop testing/checking                    # elif g_char == w_char and g_idx != w_idx:                    #     # if the characters are the same, but not in the same position.                    #                    #     if count == 1:                    #         print(f"Bokstaven {g_char} finns i ordet, men på en annan position")                    #         break  # so we don't keep testing/checking                    #     elif count != 1 and print_counter == 0 and g_idx == w_idx:                    #         print_counter += 1  # we increment with 1, so if the condition gets True again, it won't                    #         # print the same message in the same inner-loop process.                    #         print(f"Det finns flera {g_char} i ordet, men denna är inte på rätt position.")                    elif g_char in self.word and g_idx == w_idx:                        print(f"Bokstaven {g_char} är rätt men på fel plats.")            return False        elif self.guess == self.word:            print(f"Rätt gissning! Ordet var {self.word}")            return Truedef random_list_element(word_list):    # generates a random word from the parameter word_list    # source: https://docs.python.org/3/library/random.html    # random.sample generates a list. Therefor we can point    # out the value with index indication at the end.    the_random_word = random.sample(word_list, 1)[0]    return the_random_worddef guess_input(the_word):    # user input, stored as a "guess" in the game    # source: top comment https://stackoverflow.com/questions/19859282/check-if-a-string-contains-a-number/31861306    # source: any section https://docs.python.org/3/library/functions.html#any    while True:        user_guess = input("\nGissa vilket ord det är: ")        if user_guess == "ge upp" or user_guess == "surrender":            print("Du har valt att avsluta spelet.")            print(f"Ordet var: {the_word}")            exit()        elif any(char.isdigit() for char in user_guess):            print("Får enbart innehålla bokstäver.")        elif len(user_guess) is not 5:            print("Får enbart vara 5 bokstäver.")        else:            return user_guess.lower()  # no break or False point, because return jumps out of function.def console_master():    # user input, used for receiving commands    commands = ["ge upp", "surrender", "ledare", "spelare", "spelregler", "rules"]    while True:        print("\n Skriv 'cmd' om du vill se kommando alternativ.")        user_input = input("\nVill du vara ledare eller spelare?\n 1 - ledare | 2 - spelare\n >> ")        if user_input == "cmd":            print(commands)        elif user_input == "spelregler" or user_input == "rules":            game_exp.get_game_description(boolean=True)        elif user_input == "ledare":            return user_input        elif user_input == "spelare":            return user_inputif __name__ == "__main__":    words_file = "words.txt"    latin = 'ISO-8859-1'    words_list = fh.file_reader(read_file=words_file, encoding=latin)    random_word = random_list_element(word_list=words_list)    def main():        go = Compare(guess=guess_input(), word=random_word)        boolean = go.compare_words()        if not boolean:            main()    main()